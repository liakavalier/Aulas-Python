{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNewhZ1cYVAbZGNgecID6bL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/liakavalier/Aulas-Python/blob/main/aula%20estruturas%20de%20repeticao\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#aula 5 estruturas de repetição (while, for)"
      ],
      "metadata": {
        "id": "25fjpn8lwMZS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "apresentar formas de repetição\n",
        "\n",
        "* laço while: sintaxe, uso e cuidados para evitar lloops\n",
        "* laço for\n",
        "* laço aninhados\n",
        "* função range"
      ],
      "metadata": {
        "id": "-JyqIsb3yLaS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#while: le-se enquanto; exemplo: while contador: enquanto contador...\n",
        "* sempre garanta que eventualmente a condição fique falsa para evitar loop infinito."
      ],
      "metadata": {
        "id": "87MoqHqz0aJ-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5cez5Ws4wLEq",
        "outputId": "7c62634c-8eff-44d3-ffe4-df4c4be1b521"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "contagem: 1\n",
            "contagem: 2\n",
            "contagem: 3\n",
            "contagem: 4\n",
            "contagem: 5\n",
            "contagem: 6\n",
            "contagem: 7\n",
            "contagem: 8\n",
            "contagem: 9\n",
            "contagem: 10\n",
            "contagem: 11\n",
            "contagem: 12\n",
            "contagem: 13\n",
            "contagem: 14\n",
            "contagem: 15\n",
            "contagem: 16\n",
            "contagem: 17\n",
            "contagem: 18\n",
            "contagem: 19\n",
            "contagem: 20\n"
          ]
        }
      ],
      "source": [
        "contador = 1\n",
        "while contador <= 20:\n",
        "  print(\"contagem:\", contador)\n",
        "  contador += 1"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#for: usado para percorrer intervalos ou coleções; for i IN range(5) que é de 0 a 4\n",
        "* while vai infinito, for ja é delimitado"
      ],
      "metadata": {
        "id": "MFQhiHun4cZg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 1\n",
        "for i in range(5):\n",
        "  print(\"número:\", i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_B8ni2Jh5KTP",
        "outputId": "dd4ae2fd-e69f-4a7b-f6db-474384b074f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "número: 0\n",
            "número: 1\n",
            "número: 2\n",
            "número: 3\n",
            "número: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "frutas = [\"maçã\", \"banana\", \"uva\"]\n",
        "for fruta in frutas:\n",
        "  print(\"eu gosto de:\",fruta)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e_TH265P6YPq",
        "outputId": "153c0264-3de4-40ea-fe5f-8b7500898159"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "eu gosto de: maçã\n",
            "eu gosto de: banana\n",
            "eu gosto de: uva\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "use for e range para calcular a soma dos numeros de 1 a 100\n",
        "* range inicio, fim: 1, 101. range(1,101)\n",
        "* range n : de 0 ate n -1. range(5)\n",
        "* range inicio, fim, passo: controla o incremento.\n",
        "* ex range(1, 101, 2): vai pular de 2 em dois"
      ],
      "metadata": {
        "id": "gsu9HeZB9VmJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "soma = 0\n",
        "for i in range(1, 101, 2):\n",
        "  soma += i\n",
        "print(\"o total é:\", soma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mxBYHSjUE6Mu",
        "outputId": "4025b052-2c5d-4660-9554-e1b3f914d78f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "o total é: 2500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "crie uma lista com 5 nomes e mensagem personalizada para cada um"
      ],
      "metadata": {
        "id": "084_x0aHHOOb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nomes = [\"ludimila\",\"luis\",\"clara\",\"samuel\",\"mallory\",\"gustavo\"]\n",
        "for pessoas in nomes:\n",
        "  print(f\"Olá, {pessoas}! seja bem vindo(a) ao nosso programa.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H7SPwjwxHh4p",
        "outputId": "74ecefd6-48f2-4429-c65a-7086a5041667"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Olá, ludimila! seja bem vindo(a) ao nosso programa.\n",
            "Olá, luis! seja bem vindo(a) ao nosso programa.\n",
            "Olá, clara! seja bem vindo(a) ao nosso programa.\n",
            "Olá, samuel! seja bem vindo(a) ao nosso programa.\n",
            "Olá, mallory! seja bem vindo(a) ao nosso programa.\n",
            "Olá, gustavo! seja bem vindo(a) ao nosso programa.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Laço aninhado: um laço dentro de outro.\n",
        "*  primeiro resolve o interno depois vai para fora\n",
        "* i controla as linhas\n",
        "* j controla as colunas"
      ],
      "metadata": {
        "id": "QaKGyRIQMb4e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1,4):\n",
        "  for j in range(1,4):\n",
        "    print(i, \"x\", j, \"=\", i * j)\n",
        "  print(\"-\" * 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dTCbJq-DMbKc",
        "outputId": "360bdc92-f67e-493e-86eb-5793dec8c3a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 x 1 = 1\n",
            "1 x 2 = 2\n",
            "1 x 3 = 3\n",
            "----------\n",
            "2 x 1 = 2\n",
            "2 x 2 = 4\n",
            "2 x 3 = 6\n",
            "----------\n",
            "3 x 1 = 3\n",
            "3 x 2 = 6\n",
            "3 x 3 = 9\n",
            "----------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* break interrompe o laço\n",
        "* continue pula para a proxima iteração"
      ],
      "metadata": {
        "id": "wKHMVFuJPYjo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1, 10):\n",
        "  if i == 5:\n",
        "    break\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aO7E_v-YPoyf",
        "outputId": "9b505132-1b81-4a57-8ddc-0c38eab1c96b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1,10):\n",
        "  if i == 5:\n",
        "   continue\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_u4_uT4QiB2",
        "outputId": "88b23159-0bb6-4ede-9abf-cfd02875f636"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "enquanto for verdadeiro..."
      ],
      "metadata": {
        "id": "T4pmSLxXW3Fv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "while True:\n",
        "    numero = int(input(\"digite um número:\"))\n",
        "    if numero == 0:\n",
        "       print(\"programa encerrado\")\n",
        "       break\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RMtrRdCBR62X",
        "outputId": "0b4f6efb-f852-4898-dc01-4a30339ee02c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "digite um número:3\n",
            "digite um número:0\n",
            "programa encerrado\n"
          ]
        }
      ]
    }
  ]
}